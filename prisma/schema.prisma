// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    relationMode = "prisma"
    url          = env("DATABASE_URL")
}

model Image {
    fileKey       String      @id
    imageURL      String
    participant   Participant @relation(fields: [participantCI], references: [CI], onDelete: Cascade)
    participantCI String      @unique

    @@index([participantCI])
}

model Participant {
    CI             String      @id
    firstname      String
    lastname       String
    telephone      String
    email          String
    birthDate      DateTime
    institution    Institution @relation(fields: [institutionISO], references: [ISO])
    institutionISO Int
    User           User?
    image          Image?

    @@index([institutionISO])
}

model Institution {
    ISO          Int           @id
    department   String
    city         String
    name         String
    abbreviation String
    Participants Participant[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String      @id @default(cuid())
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    participant   Participant @relation(fields: [participantCI], references: [CI])
    participantCI String      @unique
    password      String

    @@index([participantCI])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
