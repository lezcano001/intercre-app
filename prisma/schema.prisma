// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    relationMode = "prisma"
    url          = env("DATABASE_URL")
}

model User {
    id            String      @id @default(cuid())
    participant   Participant @relation(fields: [participantCI], references: [CI])
    participantCI String      @unique
    password      String

    @@index([participantCI])
}

enum Gender {
    MALE
    FEMALE
}

model Participant {
    CI              String             @id
    firstname       String
    lastname        String
    telephone       String
    email           String
    birthDate       DateTime
    institution     Institution        @relation(fields: [institutionISO], references: [ISO])
    institutionISO  Int
    User            User?
    gender          Gender
    SquadList       SquadParticipant[]
    Participation   Participation[]
    participantType ParticipantsTypes

    @@index([institutionISO])
}

model Institution {
    ISO            Int             @id
    department     String
    city           String
    name           String
    abbreviation   String
    Participants   Participant[]
    Participations Participation[]
}

// Available Genres categories
// Useful for categories disciplines
enum GenresCategories {
    FEMALE
    MALE
    MIXED
}

// This register a participant of a squad to a discipline with its corresponding role
model SquadParticipant {
    // Participant
    Participant    Participant    @relation(fields: [participantCI], references: [CI], onDelete: Cascade)
    participantCI  String
    // Participation
    Participation  Participation  @relation(fields: [disciplineId, institutionISO], references: [disciplineId, institutionISO], onDelete: Cascade)
    disciplineId   String
    institutionISO Int
    // Discipline Role
    disciplineRole DisciplineRole @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
    roleId         String

    @@id([participantCI, disciplineId, roleId])
    @@index([participantCI])
    @@index([roleId])
    @@index([disciplineId, institutionISO])
}

// This register the participation of an institution into an discipline
model Participation {
    // Discipline
    discipline     Discipline  @relation(fields: [disciplineId], references: [disciplineId], onDelete: Cascade)
    disciplineId   String
    // Institution
    institution    Institution @relation(fields: [institutionISO], references: [ISO], onDelete: Cascade)
    institutionISO Int
    // Registered By
    registeredBy   Participant @relation(fields: [participantCI], references: [CI], onDelete: Cascade)
    participantCI  String

    SquadParticipants SquadParticipant[]

    inscriptionDate DateTime @default(now())

    @@id([disciplineId, institutionISO])
    @@index([disciplineId])
    @@index([institutionISO])
    @@index([participantCI])
}

// This define a new discipline
model Discipline {
    disciplineId    String           @id @default(cuid())
    name            String
    DisciplineRoles DisciplineRole[]
    Participations  Participation[]
    genreCategory   GenresCategories
}

enum AvailableRoles {
    TEAM_MANAGER
    PLAYER
    COACHING_STAFF
}

enum ParticipantsTypes {
    STUDENT
    TEACHER
}

// This create a new role for a discipline
model DisciplineRole {
    roleId                 String             @unique @default(cuid())
    discipline             Discipline         @relation(fields: [disciplineId], references: [disciplineId], onDelete: Cascade)
    disciplineId           String
    role                   AvailableRoles
    restrictGenres         Boolean
    participantsLimit      Int
    SquadParticipants      SquadParticipant[]
    allowedParticipantType ParticipantsTypes

    @@id([disciplineId, role])
    @@index([disciplineId])
}
